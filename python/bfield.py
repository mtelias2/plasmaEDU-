#function B_LAB = bfield_currentloops( P )
import numpy as np
import config as cfg
import loop as lp
import roto as roto
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
#%
#% Magnetic field at the location P(x,y,z) generated by N current loops
#% arbitrarily oriented in the 3D space.
#% The current loops are defined by the matrix 'CurrentLoops', where
#% each line of the matrix uniquely indetifies one current
#% loop in the 3D space with the following 9 parameters:
#%
#% (Xc, Yc, Zc)  :  Center of the Current Loop, expressed in the Lab Frame
#% (nx, ny, nz)  :  Normal of the Current Loop, expressed in the Lab Frame
#%           I0  :  Loop Current
#%           Ra  :  Loop Radius
#%   N_windings  :  Number of windings
#%
#%                 (1)  (2)  (3)  (4)  (5)  (6)  (7)  (8)   (9)
#% CurrentLoops = [ Xc,  Yc,  Zc,  nx,  ny,  nz,  I0,  Ra,   N_windings; ...
#%                  Xc,  Yc,  Zc,  nx,  ny,  nz,  I0,  Ra,   N_windings ];

#% Initialize the total magnetic field at the location P
def bfield(P):
    B_LAB = np.array([0,0,0])

    #   % The location P is defined as the segment OP, where O is the origin of the
    #% laboratory reference frame. The vector is expressed in the Lab reference
    #% frame.

    oplab = P

    #% Iterated over all the loops (ie., lines of the 'CurrentLoops' matrix),
    #% and sum the contribution of each loop at the location P

    for ii in range(0 , cfg.CurrentLoops.shape[0]):
    # % Keep data of the Current Loop of index 'ii'
        oclab   =   cfg.CurrentLoops[ii][0:3]
        nh      =   cfg.CurrentLoops[ii][3:6]
        I0      =   cfg.CurrentLoops[ii][6]
        Ra      =   cfg.CurrentLoops[ii][7]
        Nw      =   cfg.CurrentLoops[ii][8]

        #    % Rotation matrix
        ROT_LAB_LOOP =  roto.ROT( nh )

        #    % Roto-traslation of the P point
        variable2   =oplab-oclab
        P_LOOP      = ROT_LAB_LOOP.dot(variable2)
        R           = P_LOOP[2]
        Z           = P_LOOP[1]

        #    % Field contribution from the current Loop 'ii'
        #    % (for the analytical solution see Jackson Chap. 5)
        Br, Bz  = lp.loop( R, Z, I0, Ra, Nw )

        #    % Magnitude of the magnetic field
        variable1    =Br*Br + Bz*Bz
        Bnorm = np.sqrt(variable1)

        #    % B-field vector, expressed in the 'LOOP' reference frame
        B_LOOP = [Br, 0.0, Bz]

        #    % Rotate the b-field in the LAB frame and sum to the
        #    % the total cumulative vector
        B_LAB  = B_LAB + ROT_LAB_LOOP.dot(B_LOOP)

    return B_LAB
